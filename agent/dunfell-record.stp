/*
 * Copyright Â© Philip Withnall 2015 <philip@tecnocode.co.uk>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Log file header. */
probe begin {
  printdln (",", "Dunfell log", "1.0", gettimeofday_us ());
}

probe glib.main_context_default {
  printdln (",", "g_main_context_default", gettimeofday_us (), tid (), context);
}

probe glib.main_context_new {
  printdln (",", "g_main_context_new", gettimeofday_us (), tid (), context);
}

probe glib.main_context_acquire {
  printdln (",", "g_main_context_acquire", gettimeofday_us (), tid (), context, thread);
}

probe glib.main_context_release {
  printdln (",", "g_main_context_release", gettimeofday_us (), tid (), context, thread);
}

probe glib.main_context_free {
  printdln (",", "g_main_context_free", gettimeofday_us (), tid (), context);
}

probe glib.main_loop_new {
  printdln (",", "g_main_loop_new", gettimeofday_us (), tid (), loop, context);
}

probe glib.main_loop_quit {
  printdln (",", "g_main_loop_quit", gettimeofday_us (), tid (), loop);
}

/* TODO: Probably have to use g_idle_source_new() and g_source_attach() separately */
probe glib.idle_add {
  printdln (",", "g_idle_add", gettimeofday_us (), tid (), context, priority, func, usymname (func), data, source, id);
}

probe glib.idle_dispatch {
  printdln (",", "g_idle_dispatch", gettimeofday_us (), tid (), source, context, func, usymname (func), data, again);
}

probe glib.timeout_add {
  printdln (",", "g_timeout_add", gettimeofday_us (), tid (), context, priority, interval, func, usymname (func), data, source, id);
}

probe glib.timeout_dispatch {
  printdln (",", "g_timeout_dispatch", gettimeofday_us (), tid (), source, context, func, usymname (func), data, again);
}

probe glib.source_attach {
  printdln (",", "g_source_attach", gettimeofday_us (), tid (), source, context, id);
}
